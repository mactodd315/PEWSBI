[model]
name = marginalized_time
low-frequency-cutoff = 30.0

; marginalize_vector_params = distance
; marginalize_vector_samples = 5000

; You shouldn't use phase marginalization if the approximant has
; higher-order modes
marginalize_phase = False

marginalize_distance = True
marginalize_distance_param = distance
marginalize_distance_interpolator = True
marginalize_distance_snr_range = 5, 500
marginalize_distance_density = 100, 100
marginalize_distance_samples = 1000

[data]
instruments = H1
trigger-time = 1126259462.42
; See the documentation at
; http://pycbc.org/pycbc/latest/html/inference.html#simulated-bbh-example
; for details on the following settings:
analysis-start-time = -6
analysis-end-time = 2
psd-estimation = median-mean
psd-start-time = -64
psd-end-time = 64
psd-inverse-length = 8
psd-segment-length = 8
psd-segment-stride = 4
fake-strain = aLIGOZeroDetHighPower
fake-strain-seed = 1234
fake-strain-sample-rate = 2048
injection-file = H1:gw150914_injection.hdf
channel-name = H1:sim-strain
sample-rate = 2048
strain-high-pass = 10
pad-data = 4

[sampler]
name = dynesty
dlogz = 1.0
nlive = 500

[variable_params]
; waveform parameters that will vary in MCMC
total_mass =
distance =

[static_params]
; waveform parameters that will not change in MCMC
tc = 1126259462.420
mass_ratio = 1.21875
ra = 2.2
dec = -1.25
inclination = 2.5
polarization = 1.75
coa_phase = 1.5
f_ref = 20
f_lower = 18
approximant = IMRPhenomPv2

[prior-total_mass]
name = uniform
min-total_mass = 30
max-total_mass = 100

[prior-distance]
name = uniform_radius
min-distance = 100
max-distance = 600

[waveform_transforms-mass1]
name = custom
inputs = total_mass, mass_ratio
mass1 = mass1_from_mtotal_q(total_mass, mass_ratio)

[waveform_transforms-mass2]
name = custom
inputs = total_mass, mass_ratio
mass2 = mass2_from_mtotal_q(total_mass, mass_ratio)